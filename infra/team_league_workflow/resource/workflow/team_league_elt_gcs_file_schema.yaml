main:
  params: [ workflowConfig ]
  steps:
    - init:
        assign:
          - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - location_id: "global"
    - loadTeamStatsRawToBq:
        call: googleapis.bigquery.v2.jobs.insert
        args:
          projectId: ${project_id}
          body:
            configuration:
              load:
                destinationTable:
                  datasetId: ${workflowConfig.dataset}
                  projectId: ${project_id}
                  tableId: ${workflowConfig.team_stat_raw_table}
                referenceFileSchemaUri: ${workflowConfig.team_stats_raw_bq_schema_uri}
                sourceFormat: ${workflowConfig.team_stats_raw_bq_source_format}
                sourceUris: ${workflowConfig.team_stats_raw_files_hot_source_uri}
                createDisposition: ${workflowConfig.team_stats_raw_bq_create_disposition}
                writeDisposition: ${workflowConfig.team_stats_raw_bq_write_disposition}
        result: loadTeamStatsRawToBqResult
    - runQueryTransformToTeamStatsDomainAndLoadToBQ:
        call: googleapis.bigquery.v2.jobs.query
        args:
          projectId: ${project_id}
          body:
            useLegacySql: false
            query: INSERT INTO `mazlum_test.team_stat`
              (
              teamName,
              teamScore,
              teamSlogan,
              teamTotalGoals,
              topScorerStats,
              bestPasserStats,
              ingestionDate
              )
              SELECT
              team_stats.teamName,
              team_stats.teamScore,
              team_slogan.teamSlogan,
              sum(scorer.goals) as teamTotalGoals,
              ARRAY_AGG(
              STRUCT(
              scorer.scorerFirstName AS firstName,
              scorer.scorerLastName AS lastName,
              scorer.goals AS goals,
              scorer.games AS games
              )
              ORDER BY scorer.goals DESC LIMIT 1
              )[OFFSET(0)] AS topScorerStats,
              ARRAY_AGG(
              STRUCT(
              scorer.scorerFirstName AS firstName,
              scorer.scorerLastName AS lastName,
              scorer.goalAssists AS goalAssists,
              scorer.games AS games
              )
              ORDER BY scorer.goalAssists DESC LIMIT 1
              )[OFFSET(0)] AS bestPasserStats,
              current_timestamp() as ingestionDate
              FROM `mazlum_test.team_stat_raw` team_stats
              INNER JOIN `mazlum_test.team_slogan` team_slogan ON team_stats.teamName = team_slogan.teamName,
              UNNEST(team_stats.scorers) AS scorer
              GROUP BY
              team_stats.teamName,
              team_stats.teamScore,
              team_slogan.teamSlogan
        result: queryResult
    - copyProcessedFilesToColdBucket:
        call: googleapis.cloudbuild.v1.projects.builds.create
        args:
          projectId: ${project_id}
          parent: ${"projects/" + project_id + "/locations/" + location_id}
          body:
            serviceAccount: ${sys.get_env("GOOGLE_CLOUD_SERVICE_ACCOUNT_NAME")}
            options:
              logging: CLOUD_LOGGING_ONLY
            steps:
              - name: gcr.io/google.com/cloudsdktool/cloud-sdk:455.0.0-slim
                script: ${"gsutil cp " + workflowConfig.team_stats_raw_files_hot_source_uri + " " + workflowConfig.team_stats_raw_files_cold_destination_uri}
        result: resultCloudBuildCopy
    - returnResult:
        return: ${resultCloudBuildCopy}