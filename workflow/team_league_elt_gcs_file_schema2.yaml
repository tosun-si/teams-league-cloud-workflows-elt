#- declare:
#    assign:
#      - resultsList: [ ]
- init:
    assign:
      - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
- loadTeamStatsRawToBq:
    call: googleapis.bigquery.v2.jobs.insert
    args:
      projectId: ${project_id}
      body:
        configuration:
          load:
            destinationTable:
              datasetId: "mazlum_test"
              projectId: ${project_id}
              tableId: "team_stat_raw"
            referenceFileSchemaUri: "gs://mazlum_dev/workflows/team_league/schema/team_stats_raw_table_schema.json"
            sourceFormat: "NEWLINE_DELIMITED_JSON"
            sourceUris: "gs://mazlum_dev/workflows/team_league/elt/hot/*.json"
            createDisposition: "CREATE_NEVER"
            writeDisposition: "WRITE_APPEND"
    result: loadTeamStatsRawToBqResult
- runQuery:
    call: googleapis.bigquery.v2.jobs.query
    args:
      projectId: ${project_id}
      body:
        useLegacySql: false
        query: INSERT INTO `mazlum_test.team_stat`
          (
          teamName,
          teamScore,
          teamSlogan,
          teamTotalGoals,
          topScorerStats,
          bestPasserStats,
          ingestionDate
          )
          SELECT
          team_stats.teamName,
          team_stats.teamScore,
          team_slogan.teamSlogan,
          sum(scorer.goals) as teamTotalGoals,
          ARRAY_AGG(
          STRUCT(
          scorer.scorerFirstName AS firstName,
          scorer.scorerLastName AS lastName,
          scorer.goals AS goals,
          scorer.games AS games
          )
          ORDER BY scorer.goals DESC LIMIT 1
          )[OFFSET(0)] AS topScorerStats,
          ARRAY_AGG(
          STRUCT(
          scorer.scorerFirstName AS firstName,
          scorer.scorerLastName AS lastName,
          scorer.goalAssists AS goalAssists,
          scorer.games AS games
          )
          ORDER BY scorer.goalAssists DESC LIMIT 1
          )[OFFSET(0)] AS bestPasserStats,
          current_timestamp() as ingestionDate
          FROM `mazlum_test.team_stat_raw` team_stats
          INNER JOIN `mazlum_test.team_slogan` team_slogan ON team_stats.teamName = team_slogan.teamName,
          UNNEST(team_stats.scorers) AS scorer
          GROUP BY
          team_stats.teamName,
          team_stats.teamScore,
          team_slogan.teamSlogan;

    result: queryResult
#- returnResult:
#    return: ${queryResult}
#- copyProcessedFilesToColdBucket:
#    call: googleapis.storage.v1.objects.copy
#    args:
#      sourceBucket: "mazlum_dev"
#      sourceObject: "workflows/team_league/elt/hot/input_teams_stats_raw.json"
#      destinationBucket: "mazlum_dev"
#      destinationObject: "workflows/team_league/elt/cold/"
#    result: copyResult
- get_object_metadata:
    call: googleapis.storage.v1.objects.get
    args:
      bucket: "mazlum_dev"
      object: ${text.url_encode("workflows/team_league/elt/hot/input_teams_stats_raw.json")}
    result: object_metadata
- returnResult:
    return: ${object_metadata}